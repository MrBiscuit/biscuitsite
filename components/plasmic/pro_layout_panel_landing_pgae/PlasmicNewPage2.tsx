// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: kqnBTEDfLo
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import { CountUp } from "react-countup"; // plasmic-import: O2N6ZlMyi7/codeComponent
import { AspectRatio } from "@chakra-ui/react"; // plasmic-import: haXMqUgpyx/codeComponent
import { Image } from "@chakra-ui/react"; // plasmic-import: --YMCTTQh5/codeComponent

import { useScreenVariants as useScreenVariants_3KhhFf1Cq1Qfos } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3KhhFf1CQ1QFOS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "./plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicNewPage2.module.css"; // plasmic-import: kqnBTEDfLo/css

export type PlasmicNewPage2__VariantMembers = {};

export type PlasmicNewPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage2__VariantsArgs;
export const PlasmicNewPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage2__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage2__ArgsType;
export const PlasmicNewPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage2__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  frame1193?: p.Flex<"div">;
  frame1214?: p.Flex<"div">;
  frame1222?: p.Flex<"div">;
  youTube?: p.Flex<typeof YouTube>;
  countUp?: p.Flex<typeof CountUp>;
  aspectRatio?: p.Flex<typeof AspectRatio>;
};

export interface DefaultNewPage2Props {}

function PlasmicNewPage2__RenderFunc(props: {
  variants: PlasmicNewPage2__VariantsArgs;
  args: PlasmicNewPage2__ArgsType;
  overrides: PlasmicNewPage2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3KhhFf1Cq1Qfos()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_outline_to_single_stroke_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1193"}
                data-plasmic-override={overrides.frame1193}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1193)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame1214"}
                  data-plasmic-override={overrides.frame1214}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1214)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yjQd
                    )}
                  >
                    {"Figma Plugins"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fe4QG
                    )}
                  >
                    {"Improve productivity"}
                  </div>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xyeOv
                    )}
                  >
                    {"View All Â»"}
                  </div>
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1222"}
                data-plasmic-override={overrides.frame1222}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1222)}
              >
                <YouTube
                  data-plasmic-name={"youTube"}
                  data-plasmic-override={overrides.youTube}
                  className={classNames("__wab_instance", sty.youTube)}
                  videoId={"R6MeLqRQzYw" as const}
                />

                <CountUp
                  data-plasmic-name={"countUp"}
                  data-plasmic-override={overrides.countUp}
                  className={classNames("__wab_instance", sty.countUp)}
                  decimal={"." as const}
                  decimals={0 as const}
                  delay={0 as const}
                  duration={2.75 as const}
                  enableScrollSpy={false}
                  end={200 as const}
                  prefix={"" as const}
                  separator={"," as const}
                  start={0 as const}
                  suffix={"" as const}
                  useEasing={true}
                />

                <AspectRatio
                  data-plasmic-name={"aspectRatio"}
                  data-plasmic-override={overrides.aspectRatio}
                  className={classNames("__wab_instance", sty.aspectRatio)}
                  ratio={1.333 as const}
                >
                  <Image
                    className={classNames("__wab_instance", sty.image__rstPz)}
                    fallbackSrc={"https://via.placeholder.com/150" as const}
                    src={"https://bit.ly/naruto-sage" as const}
                  />
                </AspectRatio>
              </p.Stack>
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "frame1193",
    "frame1214",
    "frame1222",
    "youTube",
    "countUp",
    "aspectRatio"
  ],
  freeBox: [
    "freeBox",
    "frame1193",
    "frame1214",
    "frame1222",
    "youTube",
    "countUp",
    "aspectRatio"
  ],
  frame1193: ["frame1193", "frame1214"],
  frame1214: ["frame1214"],
  frame1222: ["frame1222", "youTube", "countUp", "aspectRatio"],
  youTube: ["youTube"],
  countUp: ["countUp"],
  aspectRatio: ["aspectRatio"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  frame1193: "div";
  frame1214: "div";
  frame1222: "div";
  youTube: typeof YouTube;
  countUp: typeof CountUp;
  aspectRatio: typeof AspectRatio;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage2__VariantsArgs;
    args?: PlasmicNewPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage2__ArgProps,
          internalVariantPropNames: PlasmicNewPage2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage2";
  } else {
    func.displayName = `PlasmicNewPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage2 = Object.assign(
  // Top-level PlasmicNewPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    frame1193: makeNodeComponent("frame1193"),
    frame1214: makeNodeComponent("frame1214"),
    frame1222: makeNodeComponent("frame1222"),
    youTube: makeNodeComponent("youTube"),
    countUp: makeNodeComponent("countUp"),
    aspectRatio: makeNodeComponent("aspectRatio"),

    // Metadata about props expected for PlasmicNewPage2
    internalVariantProps: PlasmicNewPage2__VariantProps,
    internalArgProps: PlasmicNewPage2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage2;
/* prettier-ignore-end */
